entre los mas conocidos tenemos:

--Singleton: es un patrón de diseño creacional que nos permite asegurarnos de que una clase tenga una única instancia, a la vez que proporciona un punto de acceso global a dicha instancia.
un ejemplo seria para controlar el acceso a una base de datos, en ves de crear instancias nuevas y reconectar a la base ya tendriamos 1 conectada constantemente, solo abria que llamarla.

--Factory: es un patrón de diseño creacional que proporciona una interfaz para crear objetos en una superclase, mientras permite a las subclases alterar el tipo de objetos que se crearán.
un ejemplo elegir precios de diferentes paises, creariamos clases para cada pais y una clase Precio que dependiendo el datop de pais que reciba usara uno o otro.

--Builder: es un patrón de diseño creacional que nos permite construir objetos complejos paso a paso. El patrón nos permite producir distintos tipos y representaciones de un objeto empleando el mismo código de construcción.

--Prototype: es un patrón de diseño creacional que nos permite copiar objetos existentes sin que el código dependa de sus clases.
en caso de querer clonar objetos en ves de crear otra clase con los paremetros y demas delagamos el trabajo en una interfaz de clonacion mediante Prototype.

--Decorador: es un patrón de diseño estructural que te permite añadir funcionalidades a objetos colocando estos objetos dentro de objetos encapsuladores especiales que contienen estas funcionalidades.
si queremos enviar sumultaneamente 1 notificacion por varios canales, los envolvemos y delegamos trabajo entre varias clases en ves de agrandar 1 clase unica.

--adapter: es un patrón de diseño estructural que permite la colaboración entre objetos con interfaces incompatibles.
nos perdime adaptar unh objeto con diferentes metodos a los de los demas, pero cuya funcionalidad es similar, haciendo una clase de adapter podremos usarlo de manera normal.

--Facade:  es un patrón de diseño estructural que proporciona una interfaz simplificada para una biblioteca, un marco o cualquier otro conjunto complejo de clases.
imagina cualquier app compleja que necesite muchas clases y metodos en ves de pedirle al cliente que aprenda usar todo, automatizamos el proceso en un solo opbjeto, y el resto del trabajo lo escondemos detras de ese objeto.